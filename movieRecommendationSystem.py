# -*- coding: utf-8 -*-
"""movieRecommendation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ibyI9NsBvLzyJ60y4_NbMl9gMMCl9lWH
"""

import pandas as pd
import numpy as np
import ast

credits = pd.read_csv('tmdb_5000_credits.csv')
movies = pd.read_csv('tmdb_5000_movies.csv')

credits.head()

movies.head(1)

movies=movies.merge(credits,left_on='title',right_on='title')

movies.head(1)

movies=movies[['movie_id','title','overview','genres','keywords','cast','crew']]

movies.head(1)

def convert(obj):
  N=[]
  for i in ast.literal_eval(obj):
      N.append(i['name'])
  return N

movies['genres']=movies['genres'].apply(convert)

movies['genres']

movies['keywords']=movies['keywords'].apply(convert)

movies['keywords']

movies['cast']

movies['cast'][0]

"""Top 3 actor"""

movies['cast']=movies['cast'].apply(lambda x:[i['name'] for i in ast.literal_eval(x)[:3]])

movies['crew'][0]

movies['crew']=movies['crew'].apply(lambda x:[i['name'] for i in ast.literal_eval(x) if i['job'] == 'Director'])

movies['tags']=movies['genres']+movies['keywords']+movies['cast']+movies['crew']

movies['tags']

movies=movies[['movie_id','title','overview','tags']]

movies['tags']=movies['tags'].apply(lambda x:" ".join(x))

movies['tags']=movies['tags'].apply(lambda x:x.lower())

movies['tags']

movies.head()

from sklearn.feature_extraction.text import TfidfVectorizer
tfidf=TfidfVectorizer(stop_words='english')
tfidf_matrix=tfidf.fit_transform(movies['tags'])

from sklearn.metrics.pairwise import cosine_similarity
cosine_sim=cosine_similarity(tfidf_matrix,tfidf_matrix)

def recommendation(title,cosine_sim=cosine_sim):
  index=movies[movies['title']==title].index[0]
  sim_scores=list(enumerate(cosine_sim[index]))
  sim_scores=sorted(sim_scores,key=lambda x:x[1],reverse=True)
  sim_scores=sim_scores[1:11]  #get top 10 similar movies
  movie_index=[i[0] for i in sim_scores]
  return movies['title'].iloc[movie_index]

print(recommendation('The Dark Knight Rises'))

import pickle
with open('movies.pkl','wb') as file:
  pickle.dump((movies,cosine_sim),file)